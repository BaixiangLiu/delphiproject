unit DB_UTL;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  Db, DBTables;

 
type
  TFM_DB_UTL = class(TForm)
    Query1: TQuery;
//    procedure Comm1ReceiveData(Sender: TObject; Buffer: Pointer;      BufferLength: Word);
  private
    { Private declarations }
  public
    { Public declarations }
  end;


// ODBC 类 =====================================================================
FUNCTION DB_SET_ODBC_ACCESS(DATASOURCE_NAME ,PATHNAME:STRING):BOOLEAN;
FUNCTION DB_SET_ODBC_INI   (INIFILENAME, DATASOURCE_NAME ,PATHNAME:STRING):BOOLEAN;
// ODBC 类 =====================================================================





// 数据库类 ====================================================================
FUNCTION DB_QUERY_TABLELIST(DATABASE_NAME:STRING):STRING; //列出 TABLE
FUNCTION DB_QUERY_FIELDLIST(TABLE_NAME:STRING):STRING; //列出 FIELD
FUNCTION DB_QUERY_FIND_VALUE(TNAME1, FNAME1, VALUE1, FNAME2:STRING):STRING;
FUNCTION DB_QUERY_FIND_VALUETEXT(TNAME1, FTEXT, FNAME2:STRING):STRING;
FUNCTION DB_QUERY_FIND_MAXDATE(TNAME1, FNAME1, FKEY1, VKEY1:STRING):STRING;
FUNCTION DB_QUERY_DEL_REC(TNAME1, FNAME1, VALUE1:STRING):INTEGER;
FUNCTION DB_QUERY_UPDATE_VALUE_REAL    (TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:REAL):BOOLEAN;
FUNCTION DB_QUERY_UPDATE_VALUE_REAL_ACC(TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:REAL):BOOLEAN;
FUNCTION DB_QUERY_UPDATE_VALUE_STRING  (TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:STRING):BOOLEAN;
FUNCTION DB_QUERY_UPDATE_VALUE_DATE    (TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:TDATE):BOOLEAN;
// 数据库类 ====================================================================









// 找出该TABLE最大值 ===========================================================
FUNCTION TABLE_MAX_RECCOUNT(TNAME1:STRING):INTEGER;
FUNCTION   TABLEFINDMAXCNT(TNAME1, FNAME1:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
FUNCTION   TABLEFINDMAXCNT2(TNAME1, FNAME1, FTITLE:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
FUNCTION DBTABLEFINDMAXCNT(TDBNAME,TNAME1, FNAME1:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
FUNCTION   TABLEFINDMAXITM(TNAME1, FNAME1,VALUE1,FNAME2:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
FUNCTION DBTABLEFINDMAXITM(TDBNAME, TNAME1, FNAME1,VALUE1,FNAME2:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
FUNCTION   TABLEFINDMAXENO(TNAME1, FNAME1:STRING):STRING;
FUNCTION   TABLEFINDMAXENO2(TNAME1, FNAME1:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
// 找出该TABLE最大值 ===========================================================



//检查重复123 (含''号) =========================================================
FUNCTION TABLECHECK_RE1(TNAME1, FNAME1, WNAME1:STRING):INTEGER;
FUNCTION TABLECHECK_RE2(TNAME1, FNAME1, FNAME2, WNAME1, WNAME2:STRING):INTEGER;
FUNCTION TABLECHECK_RE3(TNAME1, FNAME1, FNAME2, FNAME3, WNAME1, WNAME2, WNAME3:STRING):INTEGER;
//检查重复123 (不含''号)
FUNCTION TABLECHECK_RED1(TNAME1, FNAME1, WNAME1:STRING):INTEGER;
FUNCTION TABLECHECK_RED2(TNAME1, FNAME1, FNAME2, WNAME1, WNAME2:STRING):INTEGER;
FUNCTION TABLECHECK_RED3(TNAME1, FNAME1, FNAME2, FNAME3, WNAME1, WNAME2, WNAME3:STRING):INTEGER;
// =============================================================================







//调用系统设置文件 ===============================================================
FUNCTION UNSETREAD    (UNNAME, ID :STRING):STRING;
FUNCTION UNSETWRITE   (UNNAME, ID, NAMEVALUE :STRING):BOOLEAN;
FUNCTION UNSETWRITEMRK(UNNAME, ID, NAMEVALUE, NAMEMARK :STRING):BOOLEAN;
FUNCTION UNSETREADMRK (UNNAME, ID :STRING):STRING;
//调用系统设置文件 ===============================================================




//调用系统设置文件2 ==============================================================
FUNCTION UNSET_READ_SST  (LSTENO :STRING):STRING;
FUNCTION UNSET_READ_SIN  (LSTENO :STRING):INTEGER;
FUNCTION UNSET_READ_SBL  (LSTENO :STRING):BOOLEAN;
FUNCTION UNSET_READ_SME  (LSTENO :STRING):STRING;
FUNCTION UNSET_WRITE_SST (LSTENO :STRING; VALUE :STRING ):BOOLEAN;
FUNCTION UNSET_WRITE_SIN (LSTENO :STRING; VALUE :INTEGER):BOOLEAN;
FUNCTION UNSET_WRITE_SBL (LSTENO :STRING; VALUE :BOOLEAN):BOOLEAN;
FUNCTION UNSET_WRITE_SME (LSTENO :STRING; VALUE :STRING ):BOOLEAN;
//调用系统设置文件2 ==============================================================





{FUNCTION COMM_OPENPORT(T_PORT:STRING):BOOLEAN;
FUNCTION COMM_CLOSEPORT:BOOLEAN;
FUNCTION COMM_DATACLEAR:BOOLEAN;
}

var
  FM_DB_UTL: TFM_DB_UTL;

   //系统特殊值
   _DBKIND    : STRING;      // SERVER KIND (ACCESS和SQL SEVER替换)

   _DT        : STRING;      // 日期值(ACCESS和SQL SEVER替换)
   _SUMF      : ARRAY[0..9] OF STRING;      // SUM FIELD EXPR OR COLUM
   _TRUE      : STRING;      //TRUE值(ACCESS和SQL SEVER替换)
   _FALSE     : STRING;      //FALSE值(ACCESS和SQL SEVER替换)

  //硬件变量
  _BCP_DATA : STRING;

implementation

USES inifiles, Registry,
     UN_UTL;//, sysini;

{$R *.DFM}














FUNCTION DB_SET_ODBC_ACCESS(DATASOURCE_NAME ,PATHNAME:STRING):BOOLEAN;
var REG: TRegistry;
    D  : STRING;
BEGIN
  D   := DATASOURCE_NAME;
  REG := TRegistry.Create;
  try
    Reg.RootKey := HKEY_CURRENT_USER;
    IF Reg.OpenKey('\Software\ODBC\ODBC.INI\ODBC Data Sources',True) then
       Reg.WriteString(D,'Microsoft Access Driver (*.mdb)');
    IF Reg.OpenKey('\Software\ODBC\ODBC.INI\'+D,True) then
       BEGIN
       Reg.WriteString ('Driver','C:\WINDOWS\SYSTEM\odbcjt32.dll');
       Reg.WriteString ('DBQ',PATHNAME);
       Reg.WriteInteger('DriverId',64);
       Reg.WriteString ('FIL','MS Access;');
       Reg.WriteInteger('SafeTransactions',0);
       Reg.WriteString ('UID','');
       END;
    IF Reg.OpenKey('\Software\ODBC\ODBC.INI\'+D+'\Engines\Jet',True) then
       BEGIN
       Reg.WriteString ('ImplicitCommitSync','');
       Reg.WriteInteger('MaxBufferSize',32768);
       Reg.WriteInteger('PageTimeout',5);
       Reg.WriteInteger('Threads',3);
       Reg.WriteString ('UserCommitSync','Yes');
       END;
    RESULT := TRUE;
  FINALLY
    Reg.CloseKey;
    Reg.Free;
  END;
END;



FUNCTION DB_SET_ODBC_INI   (INIFILENAME, DATASOURCE_NAME ,PATHNAME:STRING):BOOLEAN;
VAR T : Tinifile;     // LOG FILE
    SERVER_KIND : STRING;
BEGIN
  IF FileExists(INIFILENAME) = FALSE  THEN
     BEGIN
     FILE_CREATE(INIFILENAME);
     DB_SET_ODBC_ACCESS(DATASOURCE_NAME , PATHNAME);
  
     T := Tinifile.Create(INIFILENAME);
     T.WRITEString('ODBC','SERVER','ACCESS');
     T.WRITEString('ODBC','DATASOURCE_NAME',DATASOURCE_NAME);
     T.WRITEString('ODBC','PATH_NAME'      ,PATHNAME);
     RESULT := TRUE;
     END ELSE BEGIN
     T := Tinifile.Create(INIFILENAME);
     SERVER_KIND := T.READString('ODBC','SERVER' ,'ACCESS');
  
     // MS ACCESS DRIVER
     IF SERVER_KIND = 'ACCESS' THEN
        BEGIN
        DATASOURCE_NAME  := T.READString('ODBC','DATASOURCE_NAME' ,DATASOURCE_NAME);
        PATHNAME        := T.READString('ODBC','PATH_NAME'       ,PATHNAME);
        DB_SET_ODBC_ACCESS(DATASOURCE_NAME ,PATHNAME);
        END;
  
     // MS SQL SERVER DRIVER
     IF SERVER_KIND = 'SQLSERVER' THEN
        BEGIN
        END;
     RESULT := TRUE;
     END;
END;







//数据库类
FUNCTION DB_QUERY_TABLELIST(DATABASE_NAME:STRING):STRING; //列出 TABLE
BEGIN
{
  TRY


   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT * FROM '+TABLE_NAME+'');
   QDBCHECK.Close;
   QDBCHECK.Open;

   try
   IF QDBCHECK.Eof = FALSE THEN  RESULT := QDBCHECK.FieldList.Text; //FOUND
   EXCEPT
      RESULT := '';
   END;

  FINALLY
  END;
  }
END;

FUNCTION DB_QUERY_FIELDLIST(TABLE_NAME:STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT * FROM '+TABLE_NAME+'');
   QDBCHECK.Close;
   QDBCHECK.Open;
   try
   IF QDBCHECK.Eof = FALSE THEN  RESULT := QDBCHECK.FieldList.Text; //FOUND
   EXCEPT
      RESULT := '';
   END;

  FINALLY
  QDBCHECK.Free;
  END;
END;


FUNCTION DB_QUERY_FIND_VALUE(TNAME1, FNAME1, VALUE1, FNAME2:STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT * FROM ' +TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.FieldByName(FNAME2).AsString;
  FINALLY
  QDBCHECK.Free;
  END;
END;

FUNCTION DB_QUERY_FIND_VALUETEXT(TNAME1, FTEXT, FNAME2:STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT * FROM ' +TNAME1);
   QDBCHECK.SQL.Add(FTEXT);
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.FieldByName(FNAME2).AsString;
  FINALLY
  QDBCHECK.Free;
  END;
END;

FUNCTION DB_QUERY_FIND_MAXDATE(TNAME1, FNAME1, FKEY1, VKEY1:STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+FNAME1+') FROM ' +TNAME1);
   IF FKEY1 <> '' THEN QDBCHECK.SQL.Add('WHERE '+FKEY1+'='''+VKEY1+'''');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsSTRING;
  FINALLY
  QDBCHECK.Free;
  END;
END;

FUNCTION DB_QUERY_DEL_REC(TNAME1, FNAME1, VALUE1:STRING):INTEGER;
VAR DELETE_CNT : INTEGER;
    QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   IF FNAME1 =  '' THEN QDBCHECK.SQL.Add('SELECT COUNT(*) FROM ' +TNAME1);
   IF FNAME1 <> '' THEN QDBCHECK.SQL.Add('SELECT COUNT('+FNAME1+') FROM ' +TNAME1);
   IF FNAME1 <> '' THEN QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.Close;
   QDBCHECK.Open;
   DELETE_CNT := QDBCHECK.Fields[0].AsINTEGER;

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('DELETE FROM ' +TNAME1);
   IF FNAME1 <> '' THEN QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.ExecSQL;
  FINALLY
  QDBCHECK.Free;
  END;

RESULT := DELETE_CNT;
END;


FUNCTION DB_QUERY_UPDATE_VALUE_REAL(TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:REAL):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('UPDATE ' +TNAME1);
   QDBCHECK.SQL.Add('SET');
   QDBCHECK.SQL.Add(FNAME2 +' = ' + FLOATTOSTR(VALUE2));
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.ExecSQL;
   RESULT := TRUE;
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION DB_QUERY_UPDATE_VALUE_REAL_ACC(TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:REAL):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('UPDATE ' +TNAME1);
   QDBCHECK.SQL.Add('SET');
   QDBCHECK.SQL.Add(FNAME2 +' = '+FNAME2+'+'+ FLOATTOSTR(VALUE2));
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.ExecSQL;
   RESULT := TRUE;
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION DB_QUERY_UPDATE_VALUE_STRING(TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:STRING):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('UPDATE ' +TNAME1);
   QDBCHECK.SQL.Add('SET');
   QDBCHECK.SQL.Add(FNAME2 +' = ''' + VALUE2 + '''');
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.ExecSQL;
   RESULT := TRUE;
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION DB_QUERY_UPDATE_VALUE_DATE(TNAME1, FNAME1, VALUE1, FNAME2:STRING;VALUE2:TDATE):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('UPDATE ' +TNAME1);
   QDBCHECK.SQL.Add('SET');
   QDBCHECK.SQL.Add(FNAME2 +' = '+_DT + DATETOSTR(VALUE2)+_DT);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+VALUE1+'''');
   QDBCHECK.ExecSQL;
   RESULT := TRUE;
  FINALLY
  QDBCHECK.Free;
  END;
END;
















FUNCTION TABLE_MAX_RECCOUNT(TNAME1:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM '+TNAME1);
   QDBCHECK.Close;
   try
     QDBCHECK.Open;
     RESULT := QDBCHECK.Fields[0].AsINTEGER;
   EXCEPT
     RESULT := -1;
   END;

  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION TABLEFINDMAXCNT(TNAME1, FNAME1:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
VAR SystemDate: TSystemTime;     //系统日期
    DATE_STR ,CNT_STR : STRING;
    QDBCHECK : TQUERY;
BEGIN
  GetLocalTime(SystemDate);            //取系统日期
  DATE_STR := FLOATTOSTR( SystemDate.wYear -1911);
  IF SystemDate.wMonth >= 10 THEN DATE_STR := DATE_STR + FLOATTOSTR( SystemDate.wMonth );
  IF SystemDate.wMonth <  10 THEN DATE_STR := DATE_STR + '0'+FLOATTOSTR( SystemDate.wMonth );
  IF SystemDate.wDay >= 10 THEN DATE_STR := DATE_STR + FLOATTOSTR( SystemDate.wDay );
  IF SystemDate.wDay <  10 THEN DATE_STR := DATE_STR + '0'+FLOATTOSTR( SystemDate.wDay );

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';
   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME1 +') FROM '+TNAME1);
   QDBCHECK.SQL.Add('WHERE '+ FNAME1 +' LIKE '''+DATE_STR+'%''');
   QDBCHECK.Close;
   try
     QDBCHECK.Open;
     CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
   EXCEPT
     CNT_STR := '0';
   END;

   IF COPY(CNT_STR,1,6) = DATE_STR THEN
      BEGIN
      CNT_STR := Copy_R(CNT_STR ,1 , NO_LENGTH);   //取最右4位
      CNT_STR := INTTOSTR( STRTOINTDEF(CNT_STR,0) + NO_STEP ); //加一位
      CNT_STR := REPLICATE('0',NO_LENGTH- LENGTH(CNT_STR)) + CNT_STR;  //加'0'
      END ELSE BEGIN
      CNT_STR := REPLICATE('0',NO_LENGTH);
      END;

  RESULT := DATE_STR + CNT_STR;  //加日期
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION   TABLEFINDMAXCNT2(TNAME1, FNAME1, FTITLE:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
VAR SystemDate: TSystemTime;     //系统日期
    DATE_STR ,CNT_STR : STRING;
    QDBCHECK : TQUERY;
BEGIN
  GetLocalTime(SystemDate);            //取系统日期
  DATE_STR := FLOATTOSTR( SystemDate.wYear -1911);
  IF SystemDate.wMonth >= 10 THEN DATE_STR := DATE_STR + FLOATTOSTR( SystemDate.wMonth );
  IF SystemDate.wMonth <  10 THEN DATE_STR := DATE_STR + '0'+FLOATTOSTR( SystemDate.wMonth );
  IF SystemDate.wDay >= 10 THEN DATE_STR := DATE_STR + FLOATTOSTR( SystemDate.wDay );
  IF SystemDate.wDay <  10 THEN DATE_STR := DATE_STR + '0'+FLOATTOSTR( SystemDate.wDay );

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';
   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME1 +') FROM '+TNAME1);
   QDBCHECK.SQL.Add('WHERE '+ FNAME1 +' LIKE '''+FTITLE+'%''');
   QDBCHECK.Close;
   TRY QDBCHECK.Open;
     CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
   EXCEPT
     CNT_STR := '0';
   END;

   IF COPY(CNT_STR,1,LENGTH(FTITLE)) = FTITLE THEN
      BEGIN
      CNT_STR := Copy_R(CNT_STR ,1 , NO_LENGTH);   //取最右4位
      CNT_STR := INTTOSTR( STRTOINTDEF(CNT_STR,0) + NO_STEP ); //加一位
      CNT_STR := REPLICATE('0',NO_LENGTH- LENGTH(CNT_STR)) + CNT_STR;  //加'0'
      END ELSE BEGIN
      CNT_STR := REPLICATE('0',NO_LENGTH);
      END;

  RESULT := FTITLE + CNT_STR;  //加日期
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION DBTABLEFINDMAXCNT(TDBNAME,TNAME1, FNAME1:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
VAR SystemDate: TSystemTime;     //系统日期
    DATE_STR ,CNT_STR : STRING;
    QDBCHECK : TQUERY;
BEGIN
  GetLocalTime(SystemDate);            //取系统日期
  DATE_STR := FLOATTOSTR( SystemDate.wYear -1911);

  IF SystemDate.wMonth >= 10 THEN DATE_STR := DATE_STR + FLOATTOSTR( SystemDate.wMonth );
  IF SystemDate.wMonth <  10 THEN DATE_STR := DATE_STR + '0'+FLOATTOSTR( SystemDate.wMonth );
  IF SystemDate.wDay >= 10 THEN DATE_STR := DATE_STR + FLOATTOSTR( SystemDate.wDay );
  IF SystemDate.wDay <  10 THEN DATE_STR := DATE_STR + '0'+FLOATTOSTR( SystemDate.wDay );

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := TDBNAME;
   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME1 +') FROM '+TNAME1);
   QDBCHECK.SQL.Add('WHERE '+ FNAME1 +' LIKE '''+DATE_STR+'%''');
   QDBCHECK.Close;
   try
     QDBCHECK.Open;
     CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
   EXCEPT
     CNT_STR := '0';
   END;

   IF COPY(CNT_STR,1,6) = DATE_STR THEN
      BEGIN
      CNT_STR := Copy_R(CNT_STR ,1 , NO_LENGTH);   //取最右4位
      CNT_STR := INTTOSTR( STRTOINTDEF(CNT_STR,0) + NO_STEP ); //加一位
      CNT_STR := REPLICATE('0',NO_LENGTH- LENGTH(CNT_STR)) + CNT_STR;  //加'0'
      END ELSE
      BEGIN
      CNT_STR := REPLICATE('0',NO_LENGTH);
      END;

  RESULT := DATE_STR + CNT_STR;  //加日期
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION TABLEFINDMAXITM(TNAME1, FNAME1,VALUE1,FNAME2:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
VAR CNT_STR : STRING;
    QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME2 +') FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+' = '''+VALUE1+'''');
   QDBCHECK.Close;
//   SHOWMESSAGE(   QDBCHECK.SQL.TEXT);
   try
     QDBCHECK.Open;
     CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
   EXCEPT
     CNT_STR := '0';
   END;

   IF QDBCHECK.EOF = FALSE THEN
      BEGIN
      CNT_STR := INTTOSTR( STRTOINTDEF(CNT_STR,0) + NO_STEP ); //加一位
      CNT_STR := REPLICATE('0',NO_LENGTH- LENGTH(CNT_STR)) + CNT_STR;  //加'0'
      END ELSE
      BEGIN
      CNT_STR := REPLICATE('0',NO_LENGTH);
      END;

   RESULT := CNT_STR;

  FINALLY
  QDBCHECK.Free;
  END;
END;

FUNCTION DBTABLEFINDMAXITM(TDBNAME, TNAME1, FNAME1,VALUE1,FNAME2:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
VAR CNT_STR : STRING;
    QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := TDBNAME;

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME2 +') FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+' = '''+VALUE1+'''');
   QDBCHECK.Close;
//   SHOWMESSAGE(   QDBCHECK.SQL.TEXT);
   try
     QDBCHECK.Open;
     CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
   EXCEPT
     CNT_STR := '0';
   END;

   IF QDBCHECK.EOF = FALSE THEN
      BEGIN
      CNT_STR := INTTOSTR( STRTOINTDEF(CNT_STR,0) + NO_STEP ); //加一位
      CNT_STR := REPLICATE('0',NO_LENGTH- LENGTH(CNT_STR)) + CNT_STR;  //加'0'
      END ELSE
      BEGIN
      CNT_STR := REPLICATE('0',NO_LENGTH);
      END;

   RESULT := CNT_STR;

  FINALLY
  QDBCHECK.Free;
  END;
END;

FUNCTION TABLEFINDMAXENO(TNAME1, FNAME1:STRING):STRING;
VAR CNT_STR : STRING;
    QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME1 +') FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.Close;
   QDBCHECK.Open;

   IF QDBCHECK.EOF = FALSE THEN
      BEGIN
      CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
      END ELSE
      BEGIN
      CNT_STR := '0';
      END;

  RESULT := CNT_STR;
  FINALLY
  QDBCHECK.Free;
  END;
END;

FUNCTION TABLEFINDMAXENO2(TNAME1, FNAME1:STRING;NO_LENGTH, NO_STEP:INTEGER):STRING;
VAR CNT_STR : STRING;    QDBCHECK : TQUERY;
BEGIN
  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';
   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT MAX('+ FNAME1 +') FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.Close;
   QDBCHECK.Open;

   IF QDBCHECK.EOF = FALSE THEN
      BEGIN
      CNT_STR := TRIM(QDBCHECK.Fields[0].AsString);
      CNT_STR := INTTOSTR( STRTOINTDEF(CNT_STR,0) + NO_STEP ); //加一位
      CNT_STR := REPLICATE('0',NO_LENGTH- LENGTH(CNT_STR)) + CNT_STR;  //加'0'
      END ELSE BEGIN
      CNT_STR := REPLICATE('0',NO_LENGTH);
      END;
  RESULT := CNT_STR;
  FINALLY  QDBCHECK.Free;  END;
END;



FUNCTION TABLECHECK_RE1(TNAME1, FNAME1, WNAME1:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+WNAME1+'''');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsInteger;
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION TABLECHECK_RED1(TNAME1, FNAME1, WNAME1:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='+WNAME1+'');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsInteger;
  FINALLY
  QDBCHECK.Free;
  END;

END;


FUNCTION TABLECHECK_RE2(TNAME1, FNAME1, FNAME2, WNAME1, WNAME2:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+WNAME1+'''');
   QDBCHECK.SQL.Add('  AND '+FNAME2+'='''+WNAME2+'''');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsInteger;
  FINALLY
  QDBCHECK.Free;
  END;

END;

FUNCTION TABLECHECK_RED2(TNAME1, FNAME1, FNAME2, WNAME1, WNAME2:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='+WNAME1+'');
   QDBCHECK.SQL.Add('  AND '+FNAME2+'='+WNAME2+'');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsInteger;
  FINALLY
  QDBCHECK.Free;
  END;

END;



FUNCTION TABLECHECK_RE3(TNAME1, FNAME1, FNAME2, FNAME3, WNAME1, WNAME2, WNAME3:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='''+WNAME1+'''');
   QDBCHECK.SQL.Add('  AND '+FNAME2+'='''+WNAME2+'''');
   QDBCHECK.SQL.Add('  AND '+FNAME3+'='''+WNAME3+'''');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsInteger;
  FINALLY
  QDBCHECK.Free;
  END;

END;


FUNCTION TABLECHECK_RED3(TNAME1, FNAME1, FNAME2, FNAME3, WNAME1, WNAME2, WNAME3:STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN

  TRY
   QDBCHECK := TQUERY.Create(APPLICATION.Owner);
   QDBCHECK.DatabaseName := 'MAIN';

   QDBCHECK.SQL.Clear;
   QDBCHECK.SQL.Add('SELECT COUNT(*) FROM');
   QDBCHECK.SQL.Add( TNAME1);
   QDBCHECK.SQL.Add('WHERE '+FNAME1+'='+WNAME1+'');
   QDBCHECK.SQL.Add('  AND '+FNAME2+'='+WNAME2+'');
   QDBCHECK.SQL.Add('  AND '+FNAME3+'='+WNAME3+'');
   QDBCHECK.Close;
   QDBCHECK.Open;
   RESULT := QDBCHECK.Fields[0].AsInteger;
  FINALLY
  QDBCHECK.Free;
  END;

END;




















//调用系统设置文件 ===============================================================
FUNCTION UNSETREAD (UNNAME, ID :STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner);
    QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSLST');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+UNNAME+'''');
    QDBCHECK.SQL.Add('  AND LSTITM = '''+ID    +'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    IF QDBCHECK.Eof = FALSE THEN RESULT := QDBCHECK.FieldByName('LSTNAM').AsString;
    IF QDBCHECK.Eof = TRUE  THEN RESULT := '';
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSETWRITE(UNNAME, ID, NAMEVALUE :STRING):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner);
    QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSLST');
    QDBCHECK.SQL.Add('WHERE LSTID1 = '''+UNNAME+'''');
    QDBCHECK.SQL.Add('  AND LSTID2 = '''+ID    +'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    TRY
      IF QDBCHECK.Eof = FALSE THEN
         BEGIN //FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('UPDATE SYSLST');
         QDBCHECK.SQL.Add('SET          ');
         QDBCHECK.SQL.Add('LSTNAM = '''+NAMEVALUE+'''');
         QDBCHECK.SQL.Add('WHERE LSTID1 = '''+UNNAME+'''');
         QDBCHECK.SQL.Add('  AND LSTID2 = '''+ID    +'''');
         QDBCHECK.ExecSQL;
         END ELSE BEGIN // NOT FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('INSERT INTO SYSLST');
         QDBCHECK.SQL.Add('( LSTID1, LSTID2, LSTNAM, LSTMRK )');
         QDBCHECK.SQL.Add('VALUES ');
         QDBCHECK.SQL.Add('('''+UNNAME   +''',');
         QDBCHECK.SQL.Add(' '''+ID       +''',');
         QDBCHECK.SQL.Add(' '''+NAMEVALUE+''',');
         QDBCHECK.SQL.Add(' '''+ ''      +''')');
         QDBCHECK.ExecSQL;
         END;
       RESULT := TRUE;
    EXCEPT
      RESULT := FALSE;
    END;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSETWRITEMRK(UNNAME, ID, NAMEVALUE, NAMEMARK :STRING):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner);
    QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSLST');
    QDBCHECK.SQL.Add('WHERE LSTID1 = '''+UNNAME+'''');
    QDBCHECK.SQL.Add('  AND LSTID2 = '''+ID    +'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    TRY
      IF QDBCHECK.Eof = FALSE THEN
         BEGIN //FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('UPDATE SYSLST');
         QDBCHECK.SQL.Add('SET          ');
         QDBCHECK.SQL.Add('LSTNAM = '''+NAMEVALUE+''',');
         QDBCHECK.SQL.Add('LSTMRK = '''+NAMEMARK +''' ');
         QDBCHECK.SQL.Add('WHERE LSTID1 = '''+UNNAME+'''');
         QDBCHECK.SQL.Add('  AND LSTID2 = '''+ID    +'''');
         QDBCHECK.ExecSQL;
         END ELSE BEGIN // NOT FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('INSERT INTO SYSLST');
         QDBCHECK.SQL.Add('( LSTID1, LSTID2, LSTNAM, LSTMRK )');
         QDBCHECK.SQL.Add('VALUES ');
         QDBCHECK.SQL.Add('('''+UNNAME   +''',');
         QDBCHECK.SQL.Add(' '''+ID       +''',');
         QDBCHECK.SQL.Add(' '''+NAMEVALUE+''',');
         QDBCHECK.SQL.Add(' '''+NAMEMARK +''')');
         QDBCHECK.ExecSQL;
         END;
      RESULT := TRUE;
    EXCEPT
      RESULT := FALSE;
    END;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSETREADMRK (UNNAME, ID :STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner);
    QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSLST');
    QDBCHECK.SQL.Add('WHERE LSTID1 = '''+UNNAME+'''');
    QDBCHECK.SQL.Add('  AND LSTID2 = '''+ID    +'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    IF QDBCHECK.Eof = FALSE THEN RESULT := QDBCHECK.FieldByName('LSTMRK').AsString;
    IF QDBCHECK.Eof = TRUE  THEN RESULT := '';
  FINALLY
    QDBCHECK.Free;
  END;
END;
//调用系统设置文件 ===============================================================



















//调用系统设置文件2 ==============================================================
FUNCTION UNSET_READ_SST  (LSTENO :STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSST');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    IF QDBCHECK.Eof = FALSE THEN RESULT := QDBCHECK.FieldByName('LSTSTR').AsString;
    IF QDBCHECK.Eof = TRUE  THEN RESULT := '';
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_READ_SIN  (LSTENO :STRING):INTEGER;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSIN');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    IF QDBCHECK.Eof = FALSE THEN RESULT := QDBCHECK.FieldByName('LSTINT').AsINTEGER;
    IF QDBCHECK.Eof = TRUE  THEN RESULT := -999999;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_READ_SBL  (LSTENO :STRING):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSBL');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    IF QDBCHECK.Eof = FALSE THEN RESULT := QDBCHECK.FieldByName('LSTBLN').AsBOOLEAN;
    IF QDBCHECK.Eof = TRUE  THEN RESULT := FALSE;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_READ_SME  (LSTENO :STRING):STRING;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSME');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    IF QDBCHECK.Eof = FALSE THEN RESULT := QDBCHECK.FieldByName('LSTMEM').AsString;
    IF QDBCHECK.Eof = TRUE  THEN RESULT := '';
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_WRITE_SST (LSTENO :STRING; VALUE :STRING ):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSST');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    TRY
      IF QDBCHECK.Eof = FALSE THEN
         BEGIN //FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('UPDATE SYSSST SET ');
         QDBCHECK.SQL.Add('LSTSTR = '''+VALUE+'''');
         QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
         QDBCHECK.ExecSQL;
         END ELSE BEGIN // NOT FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('INSERT INTO SYSSST');
         QDBCHECK.SQL.Add('( LSTENO, LSTSTR )');
         QDBCHECK.SQL.Add('VALUES ');
         QDBCHECK.SQL.Add('('''+LSTENO   +''',');
         QDBCHECK.SQL.Add(' '''+VALUE    +''')');
         QDBCHECK.ExecSQL;
         END;
      RESULT := TRUE;
    EXCEPT
      RESULT := FALSE;
    END;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_WRITE_SIN (LSTENO :STRING; VALUE :INTEGER):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSIN');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    TRY
      IF QDBCHECK.Eof = FALSE THEN
         BEGIN //FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('UPDATE SYSSIN SET ');
         QDBCHECK.SQL.Add('LSTINT = '+INTTOSTR(VALUE)+'');
         QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
         QDBCHECK.ExecSQL;
         END ELSE BEGIN // NOT FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('INSERT INTO SYSSIN');
         QDBCHECK.SQL.Add('( LSTENO, LSTINT )');
         QDBCHECK.SQL.Add('VALUES ');
         QDBCHECK.SQL.Add('('''+LSTENO   +''',');
         QDBCHECK.SQL.Add('   '+INTTOSTR(VALUE)    +'  )');
         QDBCHECK.ExecSQL;
         END;
      RESULT := TRUE;
    EXCEPT
      RESULT := FALSE;
    END;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_WRITE_SBL (LSTENO :STRING; VALUE :BOOLEAN):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSBL');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    TRY
      IF QDBCHECK.Eof = FALSE THEN
         BEGIN //FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('UPDATE SYSSBL SET ');
         QDBCHECK.SQL.Add('LSTBLN = '+BOOLEANTOSTR(VALUE)+'');
         QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
         QDBCHECK.ExecSQL;
         END ELSE BEGIN // NOT FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('INSERT INTO SYSSBL');
         QDBCHECK.SQL.Add('( LSTENO, LSTBLN )');
         QDBCHECK.SQL.Add('VALUES ');
         QDBCHECK.SQL.Add('('''+LSTENO   +''',');
         QDBCHECK.SQL.Add('   '+BOOLEANTOSTR(VALUE)    +')');
         QDBCHECK.ExecSQL;
         END;
      RESULT := TRUE;
    EXCEPT
      RESULT := FALSE;
    END;
  FINALLY
    QDBCHECK.Free;
  END;
END;

FUNCTION UNSET_WRITE_SME (LSTENO :STRING; VALUE :STRING ):BOOLEAN;
VAR QDBCHECK : TQUERY;
BEGIN
  TRY
    QDBCHECK := TQUERY.Create(APPLICATION.Owner); QDBCHECK.DatabaseName := 'MAIN';
    QDBCHECK.SQL.Clear;
    QDBCHECK.SQL.Add('SELECT * FROM SYSSME');
    QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
    QDBCHECK.Close;
    QDBCHECK.Open;
    TRY
      IF QDBCHECK.Eof = FALSE THEN
         BEGIN //FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('UPDATE SYSSME SET ');
         QDBCHECK.SQL.Add('LSTMEM = '''+VALUE+'''');
         QDBCHECK.SQL.Add('WHERE LSTENO = '''+LSTENO+'''');
         QDBCHECK.ExecSQL;
         END ELSE BEGIN // NOT FOUND
         QDBCHECK.SQL.Clear;
         QDBCHECK.SQL.Add('INSERT INTO SYSSME');
         QDBCHECK.SQL.Add('( LSTENO, LSTMEM )');
         QDBCHECK.SQL.Add('VALUES ');
         QDBCHECK.SQL.Add('('''+LSTENO   +''',');
         QDBCHECK.SQL.Add(' '''+VALUE    +''')');
         QDBCHECK.ExecSQL;
         END;
      RESULT := TRUE;
    EXCEPT
      RESULT := FALSE;
    END;
  FINALLY
    QDBCHECK.Free;
  END;
END;
//调用系统设置文件2 ==============================================================



{

FUNCTION COMM_OPENPORT(T_PORT:STRING):BOOLEAN;
BEGIN
TRY
_BCP_DATA := '';
FM_DB_UTL.COMM1.CommName := TRIM(T_PORT);
IF TEST_OPEN_FILE(FM_DB_UTL.COMM1.CommName) = TRUE THEN FM_DB_UTL.COMM1.StartComm;
RESULT := TRUE;
EXCEPT
RESULT := FALSE;
SHOWMESSAGE('无法开启通讯连接端口, 请检查设定再重新进入程序!');
END;
END;

FUNCTION COMM_DATACLEAR:BOOLEAN;
BEGIN
_BCP_DATA := '';
RESULT := TRUE;
END;

FUNCTION COMM_CLOSEPORT:BOOLEAN;
BEGIN
TRY
FM_DB_UTL.COMM1.StopComm;
RESULT := TRUE;
EXCEPT
RESULT := FALSE;
SHOWMESSAGE('无法关闭通讯连接端口, 请检查设定再重新进入程序!');
END;
END;

procedure TFM_DB_UTL.Comm1ReceiveData(Sender: TObject; Buffer: Pointer;  BufferLength: Word);
BEGIN
_BCP_DATA := _BCP_DATA + PCHAR(BUFFER);
//BCP_LIGHT.Visible := TRUE;
//IF BCP_LIGHT.Brush.Color <> CLBLUE THEN   BCP_LIGHT.Brush.Color := CLBLUE ELSE   BCP_LIGHT.Brush.Color := CLRED  ;

IF POS(#26,_BCP_DATA) >= 1 THEN
   SHOWMESSAGE('传输完成!'+#10#13+'下次传输时, 请先清除数据,请勿连续传两次!');
END;
 }
end.


